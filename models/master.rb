require 'rubygems'
require 'sequel'
require 'bcrypt'
require 'rotp'

Sequel::Model.plugin :json_serializer

# read config
options = YAML.load_file('config/database.yml')

# there has to be a better way to handle this shit
if ENV['RACK_ENV'] == 'test'
<<<<<<< HEAD
  # DataMapper::Logger.new($stdout, :debug)
  DataMapper.setup(:default, options['test'])
elsif ENV['RACK_ENV'] == 'development'
  # DataMapper::Logger.new($stdout, :debug)
  DataMapper.setup(:default, options['development'])
=======
  HVDB = Sequel.mysql(options['test'])
  HVDB.loggers << Loggers.new(STDOUT)
  HVDB.sql_log_level = :debug
elsif ENV['RACK_ENV'] == 'development'
  HVDB = Sequel.mysql(options['development'])
  HVDB.loggers << Logger.new(STDOUT)
  HVDB.sql_log_level = :debug
>>>>>>> d0cbe387bb9ec4028bb940322dde1d68aeea7a1b
elsif ENV['RACK_ENV'] == ('production' || 'default')
  HVDB = Sequel.mysql(options['production'])
  HVDB.loggers << Logger.new(STDOUT)
else
  puts 'ERROR: You must define an environment. ex: RACK_ENV=production'
  exit
end

# User class object to handle user account credentials
<<<<<<< HEAD
class User
  include DataMapper::Resource

  property :id, Serial
  property :username, String, key: true, length: (3..40), required: true
  property :hashed_password, String, length: 128
  property :admin, Boolean
  property :created_at, DateTime, default: DateTime.now
  property :phone, String, required: false
  property :email, String, required: false
  property :mfa, Boolean
  property :auth_secret, String

=======
class User < Sequel::Model(:users)
  plugin :validation_class_methods
>>>>>>> d0cbe387bb9ec4028bb940322dde1d68aeea7a1b
  attr_accessor :password
  validates_presence_of :username

  def password=(pass)
    @password = pass
    self.hashed_password = User.encrypt(@password)
  end

  def self.encrypt(pass)
    BCrypt::Password.create(pass)
  end

  def self.authenticate(username, pass)
    user = User.first(username: username)
    if user.mfa
      return user.username if pass == ROTP::TOTP.new(user.auth_secret).now.to_s
    elsif user
      return user.username if BCrypt::Password.new(user.hashed_password) == pass
    end
  end

  def self.create_test_user(attrs = {})
    user = User.new(
      username: 'test',
      admin: true,
      phone: '12223334444',
      email: 'test@localhost.com',
      hashed_password: BCrypt::Password.create('omgplains')
    )
    user.save
    user.update(attrs) if attrs
    user.save
    return user.id
  end

  def self.delete_test_user(id)
    user = User.first(id: id)
    user.destroy
  end

  def self.delete_all_users
    @users = User.all
    @users.destroy
  end

end

# Class to handle authenticated sessions
class Sessions < Sequel::Model(:sessions)

  def self.isValid?(session_key)
    sessions = Sessions.first(session_key: session_key)

    return true if sessions
  end

  def self.type(session_key)
    sess = Sessions.first(session_key: session_key)

    if sess
      if User.first(username: sess.username).admin
        return TRUE
      else
        return FALSE
      end
    end
  end

  def self.getUsername(session_key)
    sess = Sessions.first(session_key: session_key)

    return sess.username if sess
  end
end

# Each Customer record will be stored here
class Customers < Sequel::Model(:customers)

end

<<<<<<< HEAD
# Agents table use to record status
class Agents
  include DataMapper::Resource
  property :id, Serial
  property :name, String, length: 100
  property :src_ip, String, length: 45
  property :uuid, String, length: 60
  # status can be Pending, Authorized, Error, Offline, Online, Working
  property :status, String, length: 40
  property :hc_status, String, length: 6000
  property :heartbeat, DateTime
  property :benchmark, String, length: 6000
  property :devices, String, length: 6000
  property :cpu_count, Integer
  property :gpu_count, Integer
end

# Each job generated by user will be stored here
class Jobs
  include DataMapper::Resource

  property :id, Serial
  property :name, String
  property :last_updated_by, String, length: 40
  property :updated_at, DateTime, default: DateTime.now
  # status options should be "Running", "Paused", "Completed", "Queued", "Canceled", "Ready"
  property :status, String, length: 100
  property :queued_at, DateTime
  property :started_at, DateTime
  property :ended_at, DateTime
  property :hashfile_id, Integer
  property :customer_id, Integer
  property :notify_completed, Boolean
=======
class Agents < Sequel::Model(:agents)

end

# Each job generated by user will be stored here
class Jobs < Sequel::Model(:jobs)

>>>>>>> d0cbe387bb9ec4028bb940322dde1d68aeea7a1b
end

# Jobs will have multiple crack tasks
class Jobtasks < Sequel::Model(:jobtasks)

end

# Task definitions
class Tasks < Sequel::Model(:tasks)

end

# Table for handling hashes cracked and uncracked
class Hashes < Sequel::Model(:hashes)

end

# Table for managing association between users and hashes
class Hashfilehashes < Sequel::Model(:hashfilehashes)

end

# User Settings
<<<<<<< HEAD
class Settings
  include DataMapper::Resource

  property :id, Serial
  property :smtp_server, String
  property :smtp_sender, String, length: 50
  property :smtp_user, String
  property :smtp_pass, String
  property :smtp_use_tls, Boolean
  property :smtp_auth_type, String # Options are plain, login, cram_md5, none
  property :ui_themes, String, default: 'Light', required: true
  property :version, String, length: 5
  property :chunk_size, Integer, max: 9999999999999999999, default: 500000
=======
class Settings < Sequel::Model(:settings)

>>>>>>> d0cbe387bb9ec4028bb940322dde1d68aeea7a1b
end

# HashCat settings
class HashcatSettings < Sequel::Model(:hashcat_settings)

end

# Hashview Hub Settings
class HubSettings < Sequel::Model(:hub_settings)

end

# Wordlist Class
<<<<<<< HEAD
class Wordlists
  include DataMapper::Resource

  property :id, Serial
  property :lastupdated, DateTime
  property :type, String, length: 25 # Options are Static or Dynamic
  property :name, String, length: 256
  property :path, String, length: 2000
  property :size, String, length: 100
  property :checksum, String, length: 64
end

# Rules Class
class Rules
  include DataMapper::Resource

  property :id, Serial
  property :lastupdated, DateTime
  property :name, String, length: 256
  property :path, String, length: 2000
  property :size, String, length: 100
  property :checksum, String, length: 64
=======
class Wordlists < Sequel::Model(:wordlists)

end

# Rules Class
class Rules < Sequel::Model(:rules)

>>>>>>> d0cbe387bb9ec4028bb940322dde1d68aeea7a1b
end

# Hashfile Class
class Hashfiles < Sequel::Model(:hashfiles)

end

# task queue (we no logger use a resque worker)
<<<<<<< HEAD
class Taskqueues
  include DataMapper::Resource

  property :id, Serial
  property :jobtask_id, Integer
  property :job_id, Integer
  property :updated_at, DateTime, default: DateTime.now
  # status options should be "Running", "Completed", "Queued", "Canceled", "Paused"
  property :queued_at, DateTime
  property :status, String, length: 100
  property :agent_id, Integer
  property :command, String, length: 4000
=======
class Taskqueues < Sequel::Model(:taskqueues)

>>>>>>> d0cbe387bb9ec4028bb940322dde1d68aeea7a1b
end

